{>skeleton /}

{<header} {!Put all stuff for the header here.!}
{/header}

{<body}
        <div class="row">
            <div class="large-12 columns">
                <div id="titlePanel" class="panel">
                    <h1 id="{title}">Vote<span id="fiveThousand" class="neg angle-10 raise-2">Vote</span></h1>
                </div>
            </div>
        </div>

<div class="row">

 {!This page is loaded after a registered voter has authenticated with the system and would like to vote!}

 <!-- Nav Sidebar -->
    <!-- This is source ordered to be pulled to the left on larger screens -->
    <!--
    <div class="large-3 columns ">
      <div class="panel">
        <a href="#"><img src="http://placehold.it/300x240&text=[img]" /></a>
        <h5><a href="#">Voting Races</a></h5>
          <div class="section-container vertical-nav" data-section data-options="deep_linking: false; one_up: true">
          <section class="section">
            <h5 class="title"><a href="#">President</a></h5>
          </section>
          <section class="section">
            <h5 class="title"><a href="#">Vice President</a></h5>
          </section>
          <section class="section">
            <h5 class="title"><a href="#">Master of Debate</a></h5>
          </section>
          <section class="section">
            <h5 class="title"><a href="#">Cunning Linguist</a></h5>
          </section>
          <section class="section">
            <h5 class="title"><a href="#">Proposition 46: Coffee ban</a></h5>
          </section>
          <section class="section">
            <h5 class="title"><a href="#">Proposition 47: Replace public tap water with coffee</a></h5>
          </section>
        </div>
      </div>
    </div>
    -->

    <!-- Main List -->
    <!-- This has been source ordered to come first in the markup (and on small devices) but to be to the right of the nav on larger screens -->
    <!--<div class="large-9 columns">-->
    <div class="large-12 columns">

        {#voteTopics} {! For each vote topic. !}
            {>vote_topic/} {! Use the vote_topic.dust template. !}
        {/voteTopics}
        {^voteTopics} {! If we don't have vote topics. !}
            {>vote_topic/} {! Use the vote_topic.dust template. !}
        {/voteTopics}

        <form>
            <div class="row">
                <div class="large-12 columns">
                    <p><strong>Scan your Voter ID Card (i.e. paste your RSA key from when you registered).</strong></p>
                    <textarea id="private_key" name="private_key" placeholder="Private Key"></textarea>
                </div>
            </div>
            <div class="row">
                <div class="large-12 columns">
                    <a class="button success" id="submit_vote_button">Submit</a>
                </div>
            </div>
        </form>

    </div>

  </div>

{/body}

{<footer}
    <script src="/javascripts/node-rsa.js"></script>
    <!--<script src="/javascripts/jsrsasign.js"></script>-->
    <script>

        /*
         * Builds the data model containing the user's vote for each topic, along with the signature of the vote.
         */
        function constructDataModel(_voteTopic) {
            var dataModel = {};

            dataModel.name = _voteTopic.find(".voteTopicName").text();
            dataModel.choice = _voteTopic.find(".button").not(".secondary").text();
            return dataModel;
        }

        $(document).ready(function() {

            /*
             * Handle the buttons to select each topic's type.
             * TODO: Consolidate some of this code with duplicate code in
             * admin.html.dust.
             */
            $("body").on("click", ".button-group .button", function(event) {
                var _button = $(this);
                var _buttonGroup = _button.closest(".button-group");
                _buttonGroup.find(".button").addClass("secondary");
                _button.removeClass("secondary");
                event.preventDefault();
            });

            /*
             * Handle the changing of values for the vote topics. This sends a
             * vote count update to the server.
             */
            $("body").on("click", "#submit_vote_button", function(event) {

                // Get the private PEM formatted key from the form and clean it.
                var privatePEM = $("#private_key").val();
                privatePEM = privatePEM.replace(/\r\n/, '\n'); // ensure proper line endings.
                privatePEM = privatePEM.split("RSA PRIVATE KEY");
                privatePEM[0] = "-----BEGIN "; // trim preceding junk
                privatePEM[privatePEM.length-1] = "-----"; // trim trailing junk
                privatePEM = privatePEM.join("RSA PRIVATE KEY");
                $("#private_key").val(privatePEM);

// --- Using node-rsa library
                var NodeRSA = require("node-rsa");
                var rsa = new NodeRSA();
                rsa.loadFromPEM(privatePEM);
                console.log(rsa.getPrivatePEM());

// --- Using jsrsasign library
                /*var rsa = require("jsrsasign");*/

                /*var key = new rsa.RSAKey();*/
                /*key.readPrivateKeyFromPEMString(privatePEM);*/
                /*var hSig = rsa.signString("Hello WOrld", "sha256");*/
                /*console.log(hSig);*/

                /*var privateKey = rsa.KEYUTIL.getKey(privatePEM);*/
                /*var signature = new rsa.Signature({alg: "MD5withRSA"});*/
                /*signature.init(privateKey);*/


                var _voteTopics = $(".voteTopic");
                var submittedCount = 0; // count how many vote topic choices we submit to backend..
                // We're sending one request per vote topic. TODO: Make it a single request in the future.
                _voteTopics.each(function() {
                    var postData = {vote: {}, signature: {}};
                    postData.vote = constructDataModel($(this));

// --- Using node-rsa library
                    console.log( (postData.signature = rsa.sign(postData.vote, "base64")) );
                    console.log("----");

// --- Using jsrsasign library
                    /*signature.updateString(dataJson);*/
                    /*var signatureValue = signature.sign();*/
                    /*console.log(signatureValue);*/

                    $.post("/vote", postData, function(data) {
                        var _doc = $(data); // backend returns HTML pages.
                        var _thisBody = $("body");
                        submittedCount++;

                        // if we've submitted all votes.
                        if (submittedCount == _voteTopics.length) {
                            if (_doc.find("#modalMessage").length > 0) { // if server responded with a message
                                $(".modalMessage").html(_doc.find("#modalMessage").html()); // get the message
                                if ($(".joyride-tip-guide").length > 0) { // remove the current modal dialog if any is currently active.
                                    $(document).foundation('joyride', 'stop');
                                }
                                $(document).foundation('joyride', 'start'); // start a new modal dialog to display the message.
                                console.log("Vote saved.");
                            }
                            else {
                                console.log("Vote saved.");
                            }
                        }
                    });
                });
            });
        });
    </script>
{/footer}
