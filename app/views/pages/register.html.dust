{>skeleton /}

{<header} {!Put all header stuff here.!}
{/header}

{<body}

        <div class="row">
            <div class="large-12 columns">
                <div id="titlePanel" class="panel">
                    <h1 id="{title}">Register<span id="fiveThousand" class="neg angle-8 raise-3">Register</span></h1>
                </div>
            </div>
        </div>

<form id="register-form" action="{common.thisPage}" method="post" data-abide="ajax">
  <div class="row">
    <div class="large-12 columns">
      <label>Your Name
        <input name="name" type="text" required pattern="^([a-zA-Z]+\.?)*(\s+[a-zA-Z]+\.?)*(\s+[0-9]+[a-zA-Z]+)*$" placeholder="Dr. John M. Doe Jr. 3rd" />
      </label>
      <small class="error">Name is required and needs to match the name associated with your SSN number.</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Your Social Security Number           <!-- Note that {~lb} and {~rb} are rendered as { and } in the HTML after parsing by Dust.js -->
        <input name="ssn" type="password" id="ssn" required pattern="^[0-9]{~lb}3{~rb}(\s*\-?\s*)?[0-9]{~lb}2{~rb}(\s*\-?\s*)?[0-9]{~lb}4{~rb}$" placeholder="*** - ** - ***" />
      </label>
      <small class="error">Required. Must be a 9 digit social security number, with or without dashes after the 3rd and 5th numbers.</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Confirm Social Security Number
        <input type="password" data-equalto="ssn" required placeholder="*** - ** - ***" />
      </label>
      <small class="error">This field doesn't match the previous field.</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Street
        <input name="street" type="text" required pattern="^[0-9]+(\s.+)+$" placeholder="1234 Street Name Dr."></textarea>
      </label>
      <small class="error">Required. Must begin with a number followed by a space.</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>City
        <input name="city" type="text" required pattern="^(\s*[a-zA-Z]+\.?)+$" placeholder="City" />
      </label>
      <small class="error">Required. Letters only, with optional periods for abbreviation. E.g. St. Louis</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>State
        <input name="state" type="text" required pattern="^[a-zA-Z]{~lb}2{~rb}$" placeholder="XX" />
      </label>
      <small class="error">Required. Must be a two letter abbreviation. E.g. CA</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Zipcode
        <input name="zip" type="text" required pattern="^[0-9]{~lb}5{~rb}$" placeholder="12345" />
      </label>
      <small class="error">Required. Must be a 5 digit zipcode. E.g. 95758</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Is your vote public record? (Senators, etc)
        <input name="public_vote" id="public_vote_yes" type="checkbox" /><label for="public_vote_yes">Yes</label>
      </label>
    </div>
  </div>  
  <div class="row">
    <div class="large-12 columns">
      <label>Email Address
        <input name="email" type="email" pattern="^(([^&lt;&gt;()[\]\\.,;:\s@\&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@\&quot;]+)*)|(\&quot;.+\&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$" placeholder="example@example.com" />
      </label>
      <small class="error">Optional. Must be in valid email format. E.g. you@site.com</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Username
        <input name="username" type="text" required pattern="^[a-zA-Z._]+$" placeholder="noun" />
      </label>
      <small class="error">Required. Only letters, periods (.), and underscores (_) allowed. E.g user.name or user_name</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Password
        <input name="password" type="password" id="password" required pattern="^.*$" placeholder="***********" />
      </label>
      <small class="error">Required. Any characters.</small>
    </div>
  </div>
  <div class="row">
    <div class="large-12 columns">
      <label>Confirm Password
        <input type="password" data-equalto="password" required placeholder="***********" />
      </label>
      <small class="error">Passwords don't match.</small>
    </div>
  </div>

<!-- Hidden form field that contain the user's generated public key. -->
    <div class="hide">
      <div class="row">
        <div class="large-12 columns">
          <label>Public Key
            <textarea name="public_key" id="public_key" placeholder="***********"></textarea>
          </label>
          <small class="error">Required. Any characters.</small>
        </div>
      </div>
    </div>

  <div class="row">
    <div class="large-12 columns">
        <button type="submit" class="button radius">Register</button>
    </div>
  </div>
</form>

{/body}

{<footer}
    <script src="/javascripts/node-rsa.js"></script>
    <!--<script src="/javascripts/jsrsasign.js"></script>-->
    <script>
        $(document).ready(function() {
            var registrationSuccessful = false;

// --- Using node-rsa library
            var NodeRSA = require("node-rsa");
            var rsa = new NodeRSA();
            rsa.generateKeyPair(512);
            console.log(rsa.getPublicPEM());
            console.log(rsa.getPrivatePEM());
            $("#public_key").text(rsa.getPublicPEM()); // add the new voter's public key to the hidden textarea for submission.

// --- Using jsrsasign library
            /*var rsa = require("jsrsasign");*/
            /*var keypair = rsa.KEYUTIL.generateKeypair("RSA", 256);*/
            /*console.log(keypair.prvKeyObj);*/
            /*console.log(rsa.KEYUTIL.getPEM(keypair.prvKeyObj));*/
            /*$("#public_key").text(rsa.KEYUTIL.getPEM(keypair.prvKeyObj)); // add the new voter's key to the hidden textarea for submission.*/
                // Signing test:
                /*document.form1.siggenerated.value = linebrk(hSig, 64);*/
                /*var signature = new rsa.Signature({alg: "MD5withRSA"});*/
                /*signature.init(keypair.prvKeyObj);*/
                /*signature.updateString("Hello");*/
                /*var signatureValue = signature.sign();*/
                /*console.log(signatureValue);*/

            //TODO: We need a function to enforce strong, secure passwords.

            /*
             * Ajax-ify the form submission
             */
            $("#register-form").on("valid", function(event) {
                var postData = $(this).serialize();
                $.post("/register", postData, function(data) {
                    var _doc = $(data);
                    if (~_doc.find("#modalMessage").text().indexOf("Error")) {
                        registrationSuccessful = false;
                    }
                    else {
                        registrationSuccessful = true;
                    }
                    /*our backend sends back HTML pages for now, no JSON.*/
                    var _thisBody = $("body");
                    $(".modalMessage").html(_doc.find("#modalMessage").html());
                    $(".modalMessage").append("<br /><br />Your private vote key (you need it to vote): <textarea>"+rsa.getPrivatePEM()+"</textarea>");
                    if ($(".joyride-tip-guide").length > 0) {
                        $(document).foundation('joyride', 'stop');
                    }
                    $(document).foundation('joyride', 'start');
                });
                event.preventDefault();
            });

            /*
             * After successful registration, forward the user to the vote page
             * when the user dismisses the success message.
             */
            $("body").on("click", ".joyride-next-tip, .joyride-modal-bg, .joyride-close-tip", function() {
                if (registrationSuccessful) {
                    document.location = "/";
                }
            });
        });
    </script>
{/footer}
